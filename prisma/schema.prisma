// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

// weiß leider nicht wie man das verwendet muss morgen mal stackoverflow fragen
// oder nen ts zod prisma dev discord finden wo mir des wer erklären kann
// generator zod {
//     provider = "zod-prisma"
//     output   = "./zod" // (default) the directory where generated zod schemas will be saved

//     relationModel = true // (default) Create and export both plain and related models.
//     // relationModel         = "default" // Do not export model without relations.
//     // relationModel         = false // Do not generate related model

//     modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
//     // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

//     modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

//     // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
//     useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

//     imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

//     // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
//     prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
//     // prismaJsonNullability = false // allows null assignment to optional JSON fields
// }

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    BASIC
    ADMIN
}

enum AreaUnit {
    sqm
    hectar
    acre
    sqk
}

enum SensorType {
    humidity
    temperature
    light
    carbon_dioxide
    soil_moisture
    soil_ph
    wind_speed_direction
    precipitation
}

model User {
    id        String  @id @default(uuid())
    username  String
    firstName String
    lastName  String
    email     String  @unique
    password  String
    role      Role    @default(BASIC)
    fields    Field[]
}

model Field {
    id          String   @id @default(uuid())
    name        String
    area        Int
    unit        AreaUnit
    latitude    Decimal?
    longitude   Decimal?
    description String?
    // fieldOwner   User     @relation(fields: [fieldOwnerId], references: [id])
    // fieldOwnerId String
    sensors     Sensor[]
    User        User?    @relation(fields: [userId], references: [id])
    userId      String?
}

model Sensor {
    id           String        @id @default(uuid())
    type         SensorType
    field        Field         @relation(fields: [fieldId], references: [id])
    fieldId      String
    sensorValues SensorValue[]
}

model SensorValue {
    id        String   @id @default(uuid())
    value     String
    timeStamp DateTime @default(now())
    Sensor    Sensor   @relation(fields: [sensorId], references: [id])
    sensorId  String
}
